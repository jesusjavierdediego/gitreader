// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: gitreader.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash           string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AuthorName     string `protobuf:"bytes,3,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorEmail    string `protobuf:"bytes,4,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	AuthorWhen     string `protobuf:"bytes,5,opt,name=author_when,json=authorWhen,proto3" json:"author_when,omitempty"`
	CommitterName  string `protobuf:"bytes,6,opt,name=committer_name,json=committerName,proto3" json:"committer_name,omitempty"`
	CommitterEmail string `protobuf:"bytes,7,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
	CommitterWhen  string `protobuf:"bytes,8,opt,name=committer_when,json=committerWhen,proto3" json:"committer_when,omitempty"`
	Parents        int32  `protobuf:"varint,9,opt,name=parents,proto3" json:"parents,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitreader_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_gitreader_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_gitreader_proto_rawDescGZIP(), []int{0}
}

func (x *Commit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *Commit) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *Commit) GetAuthorWhen() string {
	if x != nil {
		return x.AuthorWhen
	}
	return ""
}

func (x *Commit) GetCommitterName() string {
	if x != nil {
		return x.CommitterName
	}
	return ""
}

func (x *Commit) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

func (x *Commit) GetCommitterWhen() string {
	if x != nil {
		return x.CommitterWhen
	}
	return ""
}

func (x *Commit) GetParents() int32 {
	if x != nil {
		return x.Parents
	}
	return 0
}

type RecordHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*Commit `protobuf:"bytes,12,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *RecordHistory) Reset() {
	*x = RecordHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitreader_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordHistory) ProtoMessage() {}

func (x *RecordHistory) ProtoReflect() protoreflect.Message {
	mi := &file_gitreader_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordHistory.ProtoReflect.Descriptor instead.
func (*RecordHistory) Descriptor() ([]byte, []int) {
	return file_gitreader_proto_rawDescGZIP(), []int{1}
}

func (x *RecordHistory) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitIdOld string `protobuf:"bytes,13,opt,name=commit_id_old,json=commitIdOld,proto3" json:"commit_id_old,omitempty"`
	CommitIdNew string `protobuf:"bytes,14,opt,name=commit_id_new,json=commitIdNew,proto3" json:"commit_id_new,omitempty"`
	FilePath    string `protobuf:"bytes,15,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	RepoName    string `protobuf:"bytes,16,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitreader_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_gitreader_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_gitreader_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetCommitIdOld() string {
	if x != nil {
		return x.CommitIdOld
	}
	return ""
}

func (x *Query) GetCommitIdNew() string {
	if x != nil {
		return x.CommitIdNew
	}
	return ""
}

func (x *Query) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Query) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type CommitContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,17,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CommitContent) Reset() {
	*x = CommitContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitreader_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitContent) ProtoMessage() {}

func (x *CommitContent) ProtoReflect() protoreflect.Message {
	mi := &file_gitreader_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitContent.ProtoReflect.Descriptor instead.
func (*CommitContent) Descriptor() ([]byte, []int) {
	return file_gitreader_proto_rawDescGZIP(), []int{3}
}

func (x *CommitContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DiffHtml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Html string `protobuf:"bytes,18,opt,name=html,proto3" json:"html,omitempty"`
}

func (x *DiffHtml) Reset() {
	*x = DiffHtml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitreader_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffHtml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffHtml) ProtoMessage() {}

func (x *DiffHtml) ProtoReflect() protoreflect.Message {
	mi := &file_gitreader_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffHtml.ProtoReflect.Descriptor instead.
func (*DiffHtml) Descriptor() ([]byte, []int) {
	return file_gitreader_proto_rawDescGZIP(), []int{4}
}

func (x *DiffHtml) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitreader_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_gitreader_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_gitreader_proto_rawDescGZIP(), []int{5}
}

var File_gitreader_proto protoreflect.FileDescriptor

var file_gitreader_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xac, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x68, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x4f, 0x6c,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x64, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x29, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x08, 0x44, 0x69,
	0x66, 0x66, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0xfe, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x15,
	0x2e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x48, 0x74,
	0x6d, 0x6c, 0x22, 0x00, 0x42, 0x0e, 0x48, 0x01, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitreader_proto_rawDescOnce sync.Once
	file_gitreader_proto_rawDescData = file_gitreader_proto_rawDesc
)

func file_gitreader_proto_rawDescGZIP() []byte {
	file_gitreader_proto_rawDescOnce.Do(func() {
		file_gitreader_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitreader_proto_rawDescData)
	})
	return file_gitreader_proto_rawDescData
}

var file_gitreader_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_gitreader_proto_goTypes = []interface{}{
	(*Commit)(nil),        // 0: gitreaderproto.Commit
	(*RecordHistory)(nil), // 1: gitreaderproto.RecordHistory
	(*Query)(nil),         // 2: gitreaderproto.Query
	(*CommitContent)(nil), // 3: gitreaderproto.CommitContent
	(*DiffHtml)(nil),      // 4: gitreaderproto.DiffHtml
	(*Empty)(nil),         // 5: gitreaderproto.Empty
}
var file_gitreader_proto_depIdxs = []int32{
	0, // 0: gitreaderproto.RecordHistory.commits:type_name -> gitreaderproto.Commit
	2, // 1: gitreaderproto.RecordHistoryService.GetRecordHistory:input_type -> gitreaderproto.Query
	2, // 2: gitreaderproto.RecordHistoryService.GetContentInCommit:input_type -> gitreaderproto.Query
	2, // 3: gitreaderproto.RecordHistoryService.GetDiffTwoCommitsInFile:input_type -> gitreaderproto.Query
	1, // 4: gitreaderproto.RecordHistoryService.GetRecordHistory:output_type -> gitreaderproto.RecordHistory
	3, // 5: gitreaderproto.RecordHistoryService.GetContentInCommit:output_type -> gitreaderproto.CommitContent
	4, // 6: gitreaderproto.RecordHistoryService.GetDiffTwoCommitsInFile:output_type -> gitreaderproto.DiffHtml
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gitreader_proto_init() }
func file_gitreader_proto_init() {
	if File_gitreader_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitreader_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitreader_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitreader_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitreader_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitreader_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffHtml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitreader_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitreader_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitreader_proto_goTypes,
		DependencyIndexes: file_gitreader_proto_depIdxs,
		MessageInfos:      file_gitreader_proto_msgTypes,
	}.Build()
	File_gitreader_proto = out.File
	file_gitreader_proto_rawDesc = nil
	file_gitreader_proto_goTypes = nil
	file_gitreader_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordHistoryServiceClient is the client API for RecordHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordHistoryServiceClient interface {
	GetRecordHistory(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RecordHistory, error)
	GetContentInCommit(ctx context.Context, in *Query, opts ...grpc.CallOption) (*CommitContent, error)
	GetDiffTwoCommitsInFile(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DiffHtml, error)
}

type recordHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordHistoryServiceClient(cc grpc.ClientConnInterface) RecordHistoryServiceClient {
	return &recordHistoryServiceClient{cc}
}

func (c *recordHistoryServiceClient) GetRecordHistory(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RecordHistory, error) {
	out := new(RecordHistory)
	err := c.cc.Invoke(ctx, "/gitreaderproto.RecordHistoryService/GetRecordHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHistoryServiceClient) GetContentInCommit(ctx context.Context, in *Query, opts ...grpc.CallOption) (*CommitContent, error) {
	out := new(CommitContent)
	err := c.cc.Invoke(ctx, "/gitreaderproto.RecordHistoryService/GetContentInCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHistoryServiceClient) GetDiffTwoCommitsInFile(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DiffHtml, error) {
	out := new(DiffHtml)
	err := c.cc.Invoke(ctx, "/gitreaderproto.RecordHistoryService/GetDiffTwoCommitsInFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordHistoryServiceServer is the server API for RecordHistoryService service.
type RecordHistoryServiceServer interface {
	GetRecordHistory(context.Context, *Query) (*RecordHistory, error)
	GetContentInCommit(context.Context, *Query) (*CommitContent, error)
	GetDiffTwoCommitsInFile(context.Context, *Query) (*DiffHtml, error)
}

// UnimplementedRecordHistoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordHistoryServiceServer struct {
}

func (*UnimplementedRecordHistoryServiceServer) GetRecordHistory(context.Context, *Query) (*RecordHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordHistory not implemented")
}
func (*UnimplementedRecordHistoryServiceServer) GetContentInCommit(context.Context, *Query) (*CommitContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentInCommit not implemented")
}
func (*UnimplementedRecordHistoryServiceServer) GetDiffTwoCommitsInFile(context.Context, *Query) (*DiffHtml, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiffTwoCommitsInFile not implemented")
}

func RegisterRecordHistoryServiceServer(s *grpc.Server, srv RecordHistoryServiceServer) {
	s.RegisterService(&_RecordHistoryService_serviceDesc, srv)
}

func _RecordHistoryService_GetRecordHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHistoryServiceServer).GetRecordHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitreaderproto.RecordHistoryService/GetRecordHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHistoryServiceServer).GetRecordHistory(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHistoryService_GetContentInCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHistoryServiceServer).GetContentInCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitreaderproto.RecordHistoryService/GetContentInCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHistoryServiceServer).GetContentInCommit(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHistoryService_GetDiffTwoCommitsInFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHistoryServiceServer).GetDiffTwoCommitsInFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitreaderproto.RecordHistoryService/GetDiffTwoCommitsInFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHistoryServiceServer).GetDiffTwoCommitsInFile(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordHistoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitreaderproto.RecordHistoryService",
	HandlerType: (*RecordHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecordHistory",
			Handler:    _RecordHistoryService_GetRecordHistory_Handler,
		},
		{
			MethodName: "GetContentInCommit",
			Handler:    _RecordHistoryService_GetContentInCommit_Handler,
		},
		{
			MethodName: "GetDiffTwoCommitsInFile",
			Handler:    _RecordHistoryService_GetDiffTwoCommitsInFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitreader.proto",
}
