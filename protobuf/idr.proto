syntax = "proto3";

package idrproto;

option go_package = "protobuf";
option optimize_for = SPEED;
/*
	Generate the Go code from the events.proto file using the protobuf folder as the output destination:
	'protoc -I=./protobuf --go_out=plugins=grpc:./protobuf ./protobuf/idr.proto'
*/

message IDR {
    ID user_id = 1;
    string purpose = 2;
    string context = 3;
    string business_id = 4;
    string authtoken = 5;
}

message ID {
    string piiid = 6;
    string complete_name = 7;
    string aad_user_name = 8;
    string entity_id = 9;
    string entity_name = 10;
    string address = 11;
    string postcode = 12;
    string city = 13;
    string province = 14;
    string country = 15;
}

message IDRes {
    ID user_id = 16;
    string result = 17;
    Pack pack = 18;
}

message Pack {
    int64 expiry_time = 19;
    bytes certificate = 20;
    PK private_key = 21; // Az Key Vault: Certificate
}

message PK {
    string secret = 22; // Az Key Vault: Secret
    bytes key = 23; // Az Key Vault: Key value
    bytes pfx = 24; // PFX file with cert and PK
    string kty = 25; // Type of alg. E. g. RSA  https://tools.ietf.org/html/rfc3447
    repeated string purposes = 26;
}

message Empty {}

service DigitalIdentityService {
    rpc RegisterNewDID(IDR) returns (Empty){} // Request for new DID. LRT Operation (cannot be sync)
    rpc GetDID(IDR) returns (IDRes){} // Request for an existing  DID.(sync)
    rpc PartialRevokeDID(IDR) returns (Empty){} // Request for revocation of a given relationship PIIID/Entity. LRT Operation (cannot be sync)
    rpc CompleteRevokeDID(IDR) returns (Empty){} // Request for the revocation of a whole DID, affecting to all relationships. LRT Operation (cannot be sync)
}